// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/volumeApi/volumeApi.proto

package volumeApi

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for VolumeApi service

func NewVolumeApiEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for VolumeApi service

type VolumeApiService interface {
	QueryVolumeByID(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	AddVolume(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	DeleteVolumeByID(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type volumeApiService struct {
	c    client.Client
	name string
}

func NewVolumeApiService(name string, c client.Client) VolumeApiService {
	return &volumeApiService{
		c:    c,
		name: name,
	}
}

func (c *volumeApiService) QueryVolumeByID(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "VolumeApi.QueryVolumeByID", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeApiService) AddVolume(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "VolumeApi.AddVolume", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeApiService) DeleteVolumeByID(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "VolumeApi.DeleteVolumeByID", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeApiService) Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "VolumeApi.Call", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VolumeApi service

type VolumeApiHandler interface {
	QueryVolumeByID(context.Context, *Request, *Response) error
	AddVolume(context.Context, *Request, *Response) error
	DeleteVolumeByID(context.Context, *Request, *Response) error
	Call(context.Context, *Request, *Response) error
}

func RegisterVolumeApiHandler(s server.Server, hdlr VolumeApiHandler, opts ...server.HandlerOption) error {
	type volumeApi interface {
		QueryVolumeByID(ctx context.Context, in *Request, out *Response) error
		AddVolume(ctx context.Context, in *Request, out *Response) error
		DeleteVolumeByID(ctx context.Context, in *Request, out *Response) error
		Call(ctx context.Context, in *Request, out *Response) error
	}
	type VolumeApi struct {
		volumeApi
	}
	h := &volumeApiHandler{hdlr}
	return s.Handle(s.NewHandler(&VolumeApi{h}, opts...))
}

type volumeApiHandler struct {
	VolumeApiHandler
}

func (h *volumeApiHandler) QueryVolumeByID(ctx context.Context, in *Request, out *Response) error {
	return h.VolumeApiHandler.QueryVolumeByID(ctx, in, out)
}

func (h *volumeApiHandler) AddVolume(ctx context.Context, in *Request, out *Response) error {
	return h.VolumeApiHandler.AddVolume(ctx, in, out)
}

func (h *volumeApiHandler) DeleteVolumeByID(ctx context.Context, in *Request, out *Response) error {
	return h.VolumeApiHandler.DeleteVolumeByID(ctx, in, out)
}

func (h *volumeApiHandler) Call(ctx context.Context, in *Request, out *Response) error {
	return h.VolumeApiHandler.Call(ctx, in, out)
}
