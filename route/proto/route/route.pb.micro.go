// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/route/route.proto

package route

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Route service

func NewRouteEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Route service

type RouteService interface {
	AddRoute(ctx context.Context, in *RRouteInfo, opts ...client.CallOption) (*ResponseInfo, error)
	DeleteRoute(ctx context.Context, in *RRouteID, opts ...client.CallOption) (*ResponseInfo, error)
	UpdateRoute(ctx context.Context, in *RRouteInfo, opts ...client.CallOption) (*ResponseInfo, error)
	QueryRouteByID(ctx context.Context, in *RRouteID, opts ...client.CallOption) (*RRouteInfo, error)
	QueryAllRoute(ctx context.Context, in *RequestQueryAll, opts ...client.CallOption) (*ResponseAllRoute, error)
}

type routeService struct {
	c    client.Client
	name string
}

func NewRouteService(name string, c client.Client) RouteService {
	return &routeService{
		c:    c,
		name: name,
	}
}

func (c *routeService) AddRoute(ctx context.Context, in *RRouteInfo, opts ...client.CallOption) (*ResponseInfo, error) {
	req := c.c.NewRequest(c.name, "Route.AddRoute", in)
	out := new(ResponseInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeService) DeleteRoute(ctx context.Context, in *RRouteID, opts ...client.CallOption) (*ResponseInfo, error) {
	req := c.c.NewRequest(c.name, "Route.DeleteRoute", in)
	out := new(ResponseInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeService) UpdateRoute(ctx context.Context, in *RRouteInfo, opts ...client.CallOption) (*ResponseInfo, error) {
	req := c.c.NewRequest(c.name, "Route.UpdateRoute", in)
	out := new(ResponseInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeService) QueryRouteByID(ctx context.Context, in *RRouteID, opts ...client.CallOption) (*RRouteInfo, error) {
	req := c.c.NewRequest(c.name, "Route.QueryRouteByID", in)
	out := new(RRouteInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeService) QueryAllRoute(ctx context.Context, in *RequestQueryAll, opts ...client.CallOption) (*ResponseAllRoute, error) {
	req := c.c.NewRequest(c.name, "Route.QueryAllRoute", in)
	out := new(ResponseAllRoute)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Route service

type RouteHandler interface {
	AddRoute(context.Context, *RRouteInfo, *ResponseInfo) error
	DeleteRoute(context.Context, *RRouteID, *ResponseInfo) error
	UpdateRoute(context.Context, *RRouteInfo, *ResponseInfo) error
	QueryRouteByID(context.Context, *RRouteID, *RRouteInfo) error
	QueryAllRoute(context.Context, *RequestQueryAll, *ResponseAllRoute) error
}

func RegisterRouteHandler(s server.Server, hdlr RouteHandler, opts ...server.HandlerOption) error {
	type route interface {
		AddRoute(ctx context.Context, in *RRouteInfo, out *ResponseInfo) error
		DeleteRoute(ctx context.Context, in *RRouteID, out *ResponseInfo) error
		UpdateRoute(ctx context.Context, in *RRouteInfo, out *ResponseInfo) error
		QueryRouteByID(ctx context.Context, in *RRouteID, out *RRouteInfo) error
		QueryAllRoute(ctx context.Context, in *RequestQueryAll, out *ResponseAllRoute) error
	}
	type Route struct {
		route
	}
	h := &routeHandler{hdlr}
	return s.Handle(s.NewHandler(&Route{h}, opts...))
}

type routeHandler struct {
	RouteHandler
}

func (h *routeHandler) AddRoute(ctx context.Context, in *RRouteInfo, out *ResponseInfo) error {
	return h.RouteHandler.AddRoute(ctx, in, out)
}

func (h *routeHandler) DeleteRoute(ctx context.Context, in *RRouteID, out *ResponseInfo) error {
	return h.RouteHandler.DeleteRoute(ctx, in, out)
}

func (h *routeHandler) UpdateRoute(ctx context.Context, in *RRouteInfo, out *ResponseInfo) error {
	return h.RouteHandler.UpdateRoute(ctx, in, out)
}

func (h *routeHandler) QueryRouteByID(ctx context.Context, in *RRouteID, out *RRouteInfo) error {
	return h.RouteHandler.QueryRouteByID(ctx, in, out)
}

func (h *routeHandler) QueryAllRoute(ctx context.Context, in *RequestQueryAll, out *ResponseAllRoute) error {
	return h.RouteHandler.QueryAllRoute(ctx, in, out)
}
