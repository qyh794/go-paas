// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/routeApi/routeApi.proto

package routeApi

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for RouteApi service

func NewRouteApiEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for RouteApi service

type RouteApiService interface {
	QueryRouteByID(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	AddRoute(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	DeleteRoute(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	UpdateRoute(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type routeApiService struct {
	c    client.Client
	name string
}

func NewRouteApiService(name string, c client.Client) RouteApiService {
	return &routeApiService{
		c:    c,
		name: name,
	}
}

func (c *routeApiService) QueryRouteByID(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "RouteApi.QueryRouteByID", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeApiService) AddRoute(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "RouteApi.AddRoute", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeApiService) DeleteRoute(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "RouteApi.DeleteRoute", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeApiService) UpdateRoute(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "RouteApi.UpdateRoute", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeApiService) Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "RouteApi.Call", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RouteApi service

type RouteApiHandler interface {
	QueryRouteByID(context.Context, *Request, *Response) error
	AddRoute(context.Context, *Request, *Response) error
	DeleteRoute(context.Context, *Request, *Response) error
	UpdateRoute(context.Context, *Request, *Response) error
	Call(context.Context, *Request, *Response) error
}

func RegisterRouteApiHandler(s server.Server, hdlr RouteApiHandler, opts ...server.HandlerOption) error {
	type routeApi interface {
		QueryRouteByID(ctx context.Context, in *Request, out *Response) error
		AddRoute(ctx context.Context, in *Request, out *Response) error
		DeleteRoute(ctx context.Context, in *Request, out *Response) error
		UpdateRoute(ctx context.Context, in *Request, out *Response) error
		Call(ctx context.Context, in *Request, out *Response) error
	}
	type RouteApi struct {
		routeApi
	}
	h := &routeApiHandler{hdlr}
	return s.Handle(s.NewHandler(&RouteApi{h}, opts...))
}

type routeApiHandler struct {
	RouteApiHandler
}

func (h *routeApiHandler) QueryRouteByID(ctx context.Context, in *Request, out *Response) error {
	return h.RouteApiHandler.QueryRouteByID(ctx, in, out)
}

func (h *routeApiHandler) AddRoute(ctx context.Context, in *Request, out *Response) error {
	return h.RouteApiHandler.AddRoute(ctx, in, out)
}

func (h *routeApiHandler) DeleteRoute(ctx context.Context, in *Request, out *Response) error {
	return h.RouteApiHandler.DeleteRoute(ctx, in, out)
}

func (h *routeApiHandler) UpdateRoute(ctx context.Context, in *Request, out *Response) error {
	return h.RouteApiHandler.UpdateRoute(ctx, in, out)
}

func (h *routeApiHandler) Call(ctx context.Context, in *Request, out *Response) error {
	return h.RouteApiHandler.Call(ctx, in, out)
}
