// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/appStore/appStore.proto

package appStore

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for AppStore service

func NewAppStoreEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for AppStore service

type AppStoreService interface {
	AddApp(ctx context.Context, in *RAppInfo, opts ...client.CallOption) (*Response, error)
	DeleteAppByID(ctx context.Context, in *RequestID, opts ...client.CallOption) (*Response, error)
	UpdateApp(ctx context.Context, in *RAppInfo, opts ...client.CallOption) (*Response, error)
	QueryAppByID(ctx context.Context, in *RequestID, opts ...client.CallOption) (*RAppInfo, error)
	QueryAllApps(ctx context.Context, in *RequestAllApp, opts ...client.CallOption) (*ResponseAllApp, error)
	AddInstallNum(ctx context.Context, in *RequestID, opts ...client.CallOption) (*Response, error)
	QueryInstallNum(ctx context.Context, in *RequestID, opts ...client.CallOption) (*ResponseNum, error)
	AddViewNum(ctx context.Context, in *RequestID, opts ...client.CallOption) (*Response, error)
	QueryViewNum(ctx context.Context, in *RequestID, opts ...client.CallOption) (*ResponseNum, error)
	AddComment(ctx context.Context, in *RAppComment, opts ...client.CallOption) (*Response, error)
	//  rpc DeleteComment(RequestCommentID)  returns(Response) {}
	QueryAllCommentByID(ctx context.Context, in *RequestID, opts ...client.CallOption) (*ResponseAllAppComment, error)
}

type appStoreService struct {
	c    client.Client
	name string
}

func NewAppStoreService(name string, c client.Client) AppStoreService {
	return &appStoreService{
		c:    c,
		name: name,
	}
}

func (c *appStoreService) AddApp(ctx context.Context, in *RAppInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "AppStore.AddApp", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appStoreService) DeleteAppByID(ctx context.Context, in *RequestID, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "AppStore.DeleteAppByID", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appStoreService) UpdateApp(ctx context.Context, in *RAppInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "AppStore.UpdateApp", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appStoreService) QueryAppByID(ctx context.Context, in *RequestID, opts ...client.CallOption) (*RAppInfo, error) {
	req := c.c.NewRequest(c.name, "AppStore.QueryAppByID", in)
	out := new(RAppInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appStoreService) QueryAllApps(ctx context.Context, in *RequestAllApp, opts ...client.CallOption) (*ResponseAllApp, error) {
	req := c.c.NewRequest(c.name, "AppStore.QueryAllApps", in)
	out := new(ResponseAllApp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appStoreService) AddInstallNum(ctx context.Context, in *RequestID, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "AppStore.AddInstallNum", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appStoreService) QueryInstallNum(ctx context.Context, in *RequestID, opts ...client.CallOption) (*ResponseNum, error) {
	req := c.c.NewRequest(c.name, "AppStore.QueryInstallNum", in)
	out := new(ResponseNum)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appStoreService) AddViewNum(ctx context.Context, in *RequestID, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "AppStore.AddViewNum", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appStoreService) QueryViewNum(ctx context.Context, in *RequestID, opts ...client.CallOption) (*ResponseNum, error) {
	req := c.c.NewRequest(c.name, "AppStore.QueryViewNum", in)
	out := new(ResponseNum)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appStoreService) AddComment(ctx context.Context, in *RAppComment, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "AppStore.AddComment", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appStoreService) QueryAllCommentByID(ctx context.Context, in *RequestID, opts ...client.CallOption) (*ResponseAllAppComment, error) {
	req := c.c.NewRequest(c.name, "AppStore.QueryAllCommentByID", in)
	out := new(ResponseAllAppComment)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AppStore service

type AppStoreHandler interface {
	AddApp(context.Context, *RAppInfo, *Response) error
	DeleteAppByID(context.Context, *RequestID, *Response) error
	UpdateApp(context.Context, *RAppInfo, *Response) error
	QueryAppByID(context.Context, *RequestID, *RAppInfo) error
	QueryAllApps(context.Context, *RequestAllApp, *ResponseAllApp) error
	AddInstallNum(context.Context, *RequestID, *Response) error
	QueryInstallNum(context.Context, *RequestID, *ResponseNum) error
	AddViewNum(context.Context, *RequestID, *Response) error
	QueryViewNum(context.Context, *RequestID, *ResponseNum) error
	AddComment(context.Context, *RAppComment, *Response) error
	//  rpc DeleteComment(RequestCommentID)  returns(Response) {}
	QueryAllCommentByID(context.Context, *RequestID, *ResponseAllAppComment) error
}

func RegisterAppStoreHandler(s server.Server, hdlr AppStoreHandler, opts ...server.HandlerOption) error {
	type appStore interface {
		AddApp(ctx context.Context, in *RAppInfo, out *Response) error
		DeleteAppByID(ctx context.Context, in *RequestID, out *Response) error
		UpdateApp(ctx context.Context, in *RAppInfo, out *Response) error
		QueryAppByID(ctx context.Context, in *RequestID, out *RAppInfo) error
		QueryAllApps(ctx context.Context, in *RequestAllApp, out *ResponseAllApp) error
		AddInstallNum(ctx context.Context, in *RequestID, out *Response) error
		QueryInstallNum(ctx context.Context, in *RequestID, out *ResponseNum) error
		AddViewNum(ctx context.Context, in *RequestID, out *Response) error
		QueryViewNum(ctx context.Context, in *RequestID, out *ResponseNum) error
		AddComment(ctx context.Context, in *RAppComment, out *Response) error
		QueryAllCommentByID(ctx context.Context, in *RequestID, out *ResponseAllAppComment) error
	}
	type AppStore struct {
		appStore
	}
	h := &appStoreHandler{hdlr}
	return s.Handle(s.NewHandler(&AppStore{h}, opts...))
}

type appStoreHandler struct {
	AppStoreHandler
}

func (h *appStoreHandler) AddApp(ctx context.Context, in *RAppInfo, out *Response) error {
	return h.AppStoreHandler.AddApp(ctx, in, out)
}

func (h *appStoreHandler) DeleteAppByID(ctx context.Context, in *RequestID, out *Response) error {
	return h.AppStoreHandler.DeleteAppByID(ctx, in, out)
}

func (h *appStoreHandler) UpdateApp(ctx context.Context, in *RAppInfo, out *Response) error {
	return h.AppStoreHandler.UpdateApp(ctx, in, out)
}

func (h *appStoreHandler) QueryAppByID(ctx context.Context, in *RequestID, out *RAppInfo) error {
	return h.AppStoreHandler.QueryAppByID(ctx, in, out)
}

func (h *appStoreHandler) QueryAllApps(ctx context.Context, in *RequestAllApp, out *ResponseAllApp) error {
	return h.AppStoreHandler.QueryAllApps(ctx, in, out)
}

func (h *appStoreHandler) AddInstallNum(ctx context.Context, in *RequestID, out *Response) error {
	return h.AppStoreHandler.AddInstallNum(ctx, in, out)
}

func (h *appStoreHandler) QueryInstallNum(ctx context.Context, in *RequestID, out *ResponseNum) error {
	return h.AppStoreHandler.QueryInstallNum(ctx, in, out)
}

func (h *appStoreHandler) AddViewNum(ctx context.Context, in *RequestID, out *Response) error {
	return h.AppStoreHandler.AddViewNum(ctx, in, out)
}

func (h *appStoreHandler) QueryViewNum(ctx context.Context, in *RequestID, out *ResponseNum) error {
	return h.AppStoreHandler.QueryViewNum(ctx, in, out)
}

func (h *appStoreHandler) AddComment(ctx context.Context, in *RAppComment, out *Response) error {
	return h.AppStoreHandler.AddComment(ctx, in, out)
}

func (h *appStoreHandler) QueryAllCommentByID(ctx context.Context, in *RequestID, out *ResponseAllAppComment) error {
	return h.AppStoreHandler.QueryAllCommentByID(ctx, in, out)
}
