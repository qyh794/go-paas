// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/middleware/middleware.proto

package middleware

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Middleware service

func NewMiddlewareEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Middleware service

type MiddlewareService interface {
	// 新增中间件
	AddMiddleware(ctx context.Context, in *RMiddlewareInfo, opts ...client.CallOption) (*ResponseInfo, error)
	// 通过ID删除中间件
	DeleteMiddlewareByID(ctx context.Context, in *RequestMiddlewareID, opts ...client.CallOption) (*ResponseInfo, error)
	// 更新中间件信息
	UpdateMiddleware(ctx context.Context, in *RMiddlewareInfo, opts ...client.CallOption) (*ResponseInfo, error)
	// 通过ID查询中间件
	QueryMiddlewareByID(ctx context.Context, in *RequestMiddlewareID, opts ...client.CallOption) (*RMiddlewareInfo, error)
	// 查询所有中间件
	QueryAllMiddleware(ctx context.Context, in *RequestAll, opts ...client.CallOption) (*ResponseAllMiddleware, error)
	// 通过中间件类型MiddlewareTypeID查询所有相同的中间件
	QueryAllMiddlewareByTypeID(ctx context.Context, in *RequestMiddleTypeID, opts ...client.CallOption) (*ResponseAllMiddleware, error)
	// 通过ID查询中间件类型
	QueryMiddleTypeByID(ctx context.Context, in *RequestMiddleTypeID, opts ...client.CallOption) (*RMiddleTypeInfo, error)
	// 创建中间件类型
	AddMiddlewareType(ctx context.Context, in *RMiddleTypeInfo, opts ...client.CallOption) (*ResponseInfo, error)
	// 删除中间件类型
	DeleteMiddleTypeByID(ctx context.Context, in *RequestMiddleTypeID, opts ...client.CallOption) (*ResponseInfo, error)
	// 更新中间件类型
	UpdateMiddleType(ctx context.Context, in *RMiddleTypeInfo, opts ...client.CallOption) (*ResponseInfo, error)
	// 查询所有中间件类型
	QueryAllMiddleType(ctx context.Context, in *RequestAll, opts ...client.CallOption) (*ResponseAllMiddleType, error)
}

type middlewareService struct {
	c    client.Client
	name string
}

func NewMiddlewareService(name string, c client.Client) MiddlewareService {
	return &middlewareService{
		c:    c,
		name: name,
	}
}

func (c *middlewareService) AddMiddleware(ctx context.Context, in *RMiddlewareInfo, opts ...client.CallOption) (*ResponseInfo, error) {
	req := c.c.NewRequest(c.name, "Middleware.AddMiddleware", in)
	out := new(ResponseInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareService) DeleteMiddlewareByID(ctx context.Context, in *RequestMiddlewareID, opts ...client.CallOption) (*ResponseInfo, error) {
	req := c.c.NewRequest(c.name, "Middleware.DeleteMiddlewareByID", in)
	out := new(ResponseInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareService) UpdateMiddleware(ctx context.Context, in *RMiddlewareInfo, opts ...client.CallOption) (*ResponseInfo, error) {
	req := c.c.NewRequest(c.name, "Middleware.UpdateMiddleware", in)
	out := new(ResponseInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareService) QueryMiddlewareByID(ctx context.Context, in *RequestMiddlewareID, opts ...client.CallOption) (*RMiddlewareInfo, error) {
	req := c.c.NewRequest(c.name, "Middleware.QueryMiddlewareByID", in)
	out := new(RMiddlewareInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareService) QueryAllMiddleware(ctx context.Context, in *RequestAll, opts ...client.CallOption) (*ResponseAllMiddleware, error) {
	req := c.c.NewRequest(c.name, "Middleware.QueryAllMiddleware", in)
	out := new(ResponseAllMiddleware)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareService) QueryAllMiddlewareByTypeID(ctx context.Context, in *RequestMiddleTypeID, opts ...client.CallOption) (*ResponseAllMiddleware, error) {
	req := c.c.NewRequest(c.name, "Middleware.QueryAllMiddlewareByTypeID", in)
	out := new(ResponseAllMiddleware)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareService) QueryMiddleTypeByID(ctx context.Context, in *RequestMiddleTypeID, opts ...client.CallOption) (*RMiddleTypeInfo, error) {
	req := c.c.NewRequest(c.name, "Middleware.QueryMiddleTypeByID", in)
	out := new(RMiddleTypeInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareService) AddMiddlewareType(ctx context.Context, in *RMiddleTypeInfo, opts ...client.CallOption) (*ResponseInfo, error) {
	req := c.c.NewRequest(c.name, "Middleware.AddMiddlewareType", in)
	out := new(ResponseInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareService) DeleteMiddleTypeByID(ctx context.Context, in *RequestMiddleTypeID, opts ...client.CallOption) (*ResponseInfo, error) {
	req := c.c.NewRequest(c.name, "Middleware.DeleteMiddleTypeByID", in)
	out := new(ResponseInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareService) UpdateMiddleType(ctx context.Context, in *RMiddleTypeInfo, opts ...client.CallOption) (*ResponseInfo, error) {
	req := c.c.NewRequest(c.name, "Middleware.UpdateMiddleType", in)
	out := new(ResponseInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareService) QueryAllMiddleType(ctx context.Context, in *RequestAll, opts ...client.CallOption) (*ResponseAllMiddleType, error) {
	req := c.c.NewRequest(c.name, "Middleware.QueryAllMiddleType", in)
	out := new(ResponseAllMiddleType)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Middleware service

type MiddlewareHandler interface {
	// 新增中间件
	AddMiddleware(context.Context, *RMiddlewareInfo, *ResponseInfo) error
	// 通过ID删除中间件
	DeleteMiddlewareByID(context.Context, *RequestMiddlewareID, *ResponseInfo) error
	// 更新中间件信息
	UpdateMiddleware(context.Context, *RMiddlewareInfo, *ResponseInfo) error
	// 通过ID查询中间件
	QueryMiddlewareByID(context.Context, *RequestMiddlewareID, *RMiddlewareInfo) error
	// 查询所有中间件
	QueryAllMiddleware(context.Context, *RequestAll, *ResponseAllMiddleware) error
	// 通过中间件类型MiddlewareTypeID查询所有相同的中间件
	QueryAllMiddlewareByTypeID(context.Context, *RequestMiddleTypeID, *ResponseAllMiddleware) error
	// 通过ID查询中间件类型
	QueryMiddleTypeByID(context.Context, *RequestMiddleTypeID, *RMiddleTypeInfo) error
	// 创建中间件类型
	AddMiddlewareType(context.Context, *RMiddleTypeInfo, *ResponseInfo) error
	// 删除中间件类型
	DeleteMiddleTypeByID(context.Context, *RequestMiddleTypeID, *ResponseInfo) error
	// 更新中间件类型
	UpdateMiddleType(context.Context, *RMiddleTypeInfo, *ResponseInfo) error
	// 查询所有中间件类型
	QueryAllMiddleType(context.Context, *RequestAll, *ResponseAllMiddleType) error
}

func RegisterMiddlewareHandler(s server.Server, hdlr MiddlewareHandler, opts ...server.HandlerOption) error {
	type middleware interface {
		AddMiddleware(ctx context.Context, in *RMiddlewareInfo, out *ResponseInfo) error
		DeleteMiddlewareByID(ctx context.Context, in *RequestMiddlewareID, out *ResponseInfo) error
		UpdateMiddleware(ctx context.Context, in *RMiddlewareInfo, out *ResponseInfo) error
		QueryMiddlewareByID(ctx context.Context, in *RequestMiddlewareID, out *RMiddlewareInfo) error
		QueryAllMiddleware(ctx context.Context, in *RequestAll, out *ResponseAllMiddleware) error
		QueryAllMiddlewareByTypeID(ctx context.Context, in *RequestMiddleTypeID, out *ResponseAllMiddleware) error
		QueryMiddleTypeByID(ctx context.Context, in *RequestMiddleTypeID, out *RMiddleTypeInfo) error
		AddMiddlewareType(ctx context.Context, in *RMiddleTypeInfo, out *ResponseInfo) error
		DeleteMiddleTypeByID(ctx context.Context, in *RequestMiddleTypeID, out *ResponseInfo) error
		UpdateMiddleType(ctx context.Context, in *RMiddleTypeInfo, out *ResponseInfo) error
		QueryAllMiddleType(ctx context.Context, in *RequestAll, out *ResponseAllMiddleType) error
	}
	type Middleware struct {
		middleware
	}
	h := &middlewareHandler{hdlr}
	return s.Handle(s.NewHandler(&Middleware{h}, opts...))
}

type middlewareHandler struct {
	MiddlewareHandler
}

func (h *middlewareHandler) AddMiddleware(ctx context.Context, in *RMiddlewareInfo, out *ResponseInfo) error {
	return h.MiddlewareHandler.AddMiddleware(ctx, in, out)
}

func (h *middlewareHandler) DeleteMiddlewareByID(ctx context.Context, in *RequestMiddlewareID, out *ResponseInfo) error {
	return h.MiddlewareHandler.DeleteMiddlewareByID(ctx, in, out)
}

func (h *middlewareHandler) UpdateMiddleware(ctx context.Context, in *RMiddlewareInfo, out *ResponseInfo) error {
	return h.MiddlewareHandler.UpdateMiddleware(ctx, in, out)
}

func (h *middlewareHandler) QueryMiddlewareByID(ctx context.Context, in *RequestMiddlewareID, out *RMiddlewareInfo) error {
	return h.MiddlewareHandler.QueryMiddlewareByID(ctx, in, out)
}

func (h *middlewareHandler) QueryAllMiddleware(ctx context.Context, in *RequestAll, out *ResponseAllMiddleware) error {
	return h.MiddlewareHandler.QueryAllMiddleware(ctx, in, out)
}

func (h *middlewareHandler) QueryAllMiddlewareByTypeID(ctx context.Context, in *RequestMiddleTypeID, out *ResponseAllMiddleware) error {
	return h.MiddlewareHandler.QueryAllMiddlewareByTypeID(ctx, in, out)
}

func (h *middlewareHandler) QueryMiddleTypeByID(ctx context.Context, in *RequestMiddleTypeID, out *RMiddleTypeInfo) error {
	return h.MiddlewareHandler.QueryMiddleTypeByID(ctx, in, out)
}

func (h *middlewareHandler) AddMiddlewareType(ctx context.Context, in *RMiddleTypeInfo, out *ResponseInfo) error {
	return h.MiddlewareHandler.AddMiddlewareType(ctx, in, out)
}

func (h *middlewareHandler) DeleteMiddleTypeByID(ctx context.Context, in *RequestMiddleTypeID, out *ResponseInfo) error {
	return h.MiddlewareHandler.DeleteMiddleTypeByID(ctx, in, out)
}

func (h *middlewareHandler) UpdateMiddleType(ctx context.Context, in *RMiddleTypeInfo, out *ResponseInfo) error {
	return h.MiddlewareHandler.UpdateMiddleType(ctx, in, out)
}

func (h *middlewareHandler) QueryAllMiddleType(ctx context.Context, in *RequestAll, out *ResponseAllMiddleType) error {
	return h.MiddlewareHandler.QueryAllMiddleType(ctx, in, out)
}
