// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: pod.proto

// 声明protobuf中的包名

package pod

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Pod service

func NewPodEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Pod service

type PodService interface {
	AddPod(ctx context.Context, in *RPodInfo, opts ...client.CallOption) (*ResponseMsg, error)
	DeletePod(ctx context.Context, in *RequestPodID, opts ...client.CallOption) (*ResponseMsg, error)
	QueryPodByID(ctx context.Context, in *RequestPodID, opts ...client.CallOption) (*RPodInfo, error)
	UpdatePod(ctx context.Context, in *RPodInfo, opts ...client.CallOption) (*ResponseMsg, error)
	QueryAllPods(ctx context.Context, in *RequestQueryAll, opts ...client.CallOption) (*ResponseAllPod, error)
}

type podService struct {
	c    client.Client
	name string
}

func NewPodService(name string, c client.Client) PodService {
	return &podService{
		c:    c,
		name: name,
	}
}

func (c *podService) AddPod(ctx context.Context, in *RPodInfo, opts ...client.CallOption) (*ResponseMsg, error) {
	req := c.c.NewRequest(c.name, "Pod.AddPod", in)
	out := new(ResponseMsg)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podService) DeletePod(ctx context.Context, in *RequestPodID, opts ...client.CallOption) (*ResponseMsg, error) {
	req := c.c.NewRequest(c.name, "Pod.DeletePod", in)
	out := new(ResponseMsg)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podService) QueryPodByID(ctx context.Context, in *RequestPodID, opts ...client.CallOption) (*RPodInfo, error) {
	req := c.c.NewRequest(c.name, "Pod.QueryPodByID", in)
	out := new(RPodInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podService) UpdatePod(ctx context.Context, in *RPodInfo, opts ...client.CallOption) (*ResponseMsg, error) {
	req := c.c.NewRequest(c.name, "Pod.UpdatePod", in)
	out := new(ResponseMsg)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podService) QueryAllPods(ctx context.Context, in *RequestQueryAll, opts ...client.CallOption) (*ResponseAllPod, error) {
	req := c.c.NewRequest(c.name, "Pod.QueryAllPods", in)
	out := new(ResponseAllPod)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Pod service

type PodHandler interface {
	AddPod(context.Context, *RPodInfo, *ResponseMsg) error
	DeletePod(context.Context, *RequestPodID, *ResponseMsg) error
	QueryPodByID(context.Context, *RequestPodID, *RPodInfo) error
	UpdatePod(context.Context, *RPodInfo, *ResponseMsg) error
	QueryAllPods(context.Context, *RequestQueryAll, *ResponseAllPod) error
}

func RegisterPodHandler(s server.Server, hdlr PodHandler, opts ...server.HandlerOption) error {
	type pod interface {
		AddPod(ctx context.Context, in *RPodInfo, out *ResponseMsg) error
		DeletePod(ctx context.Context, in *RequestPodID, out *ResponseMsg) error
		QueryPodByID(ctx context.Context, in *RequestPodID, out *RPodInfo) error
		UpdatePod(ctx context.Context, in *RPodInfo, out *ResponseMsg) error
		QueryAllPods(ctx context.Context, in *RequestQueryAll, out *ResponseAllPod) error
	}
	type Pod struct {
		pod
	}
	h := &podHandler{hdlr}
	return s.Handle(s.NewHandler(&Pod{h}, opts...))
}

type podHandler struct {
	PodHandler
}

func (h *podHandler) AddPod(ctx context.Context, in *RPodInfo, out *ResponseMsg) error {
	return h.PodHandler.AddPod(ctx, in, out)
}

func (h *podHandler) DeletePod(ctx context.Context, in *RequestPodID, out *ResponseMsg) error {
	return h.PodHandler.DeletePod(ctx, in, out)
}

func (h *podHandler) QueryPodByID(ctx context.Context, in *RequestPodID, out *RPodInfo) error {
	return h.PodHandler.QueryPodByID(ctx, in, out)
}

func (h *podHandler) UpdatePod(ctx context.Context, in *RPodInfo, out *ResponseMsg) error {
	return h.PodHandler.UpdatePod(ctx, in, out)
}

func (h *podHandler) QueryAllPods(ctx context.Context, in *RequestQueryAll, out *ResponseAllPod) error {
	return h.PodHandler.QueryAllPods(ctx, in, out)
}
