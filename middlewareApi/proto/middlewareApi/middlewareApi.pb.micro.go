// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/middlewareApi/middlewareApi.proto

package middlewareApi

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MiddlewareApi service

func NewMiddlewareApiEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for MiddlewareApi service

type MiddlewareApiService interface {
	AddMiddleware(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	DeleteMiddleware(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	UpdateMiddleware(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	QueryMiddlewareByID(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	QueryAllMiddleware(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	QueryAllMiddlewareByTypeID(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	AddMiddlewareType(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	DeleteMiddlewareTypeByID(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	UpdateMiddlewareType(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	QueryMiddlewareTypeByID(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	QueryAllMiddlewareType(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type middlewareApiService struct {
	c    client.Client
	name string
}

func NewMiddlewareApiService(name string, c client.Client) MiddlewareApiService {
	return &middlewareApiService{
		c:    c,
		name: name,
	}
}

func (c *middlewareApiService) AddMiddleware(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MiddlewareApi.AddMiddleware", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareApiService) DeleteMiddleware(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MiddlewareApi.DeleteMiddleware", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareApiService) UpdateMiddleware(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MiddlewareApi.UpdateMiddleware", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareApiService) QueryMiddlewareByID(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MiddlewareApi.QueryMiddlewareByID", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareApiService) QueryAllMiddleware(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MiddlewareApi.QueryAllMiddleware", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareApiService) QueryAllMiddlewareByTypeID(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MiddlewareApi.QueryAllMiddlewareByTypeID", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareApiService) AddMiddlewareType(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MiddlewareApi.AddMiddlewareType", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareApiService) DeleteMiddlewareTypeByID(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MiddlewareApi.DeleteMiddlewareTypeByID", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareApiService) UpdateMiddlewareType(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MiddlewareApi.UpdateMiddlewareType", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareApiService) QueryMiddlewareTypeByID(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MiddlewareApi.QueryMiddlewareTypeByID", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareApiService) QueryAllMiddlewareType(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MiddlewareApi.QueryAllMiddlewareType", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MiddlewareApi service

type MiddlewareApiHandler interface {
	AddMiddleware(context.Context, *Request, *Response) error
	DeleteMiddleware(context.Context, *Request, *Response) error
	UpdateMiddleware(context.Context, *Request, *Response) error
	QueryMiddlewareByID(context.Context, *Request, *Response) error
	QueryAllMiddleware(context.Context, *Request, *Response) error
	QueryAllMiddlewareByTypeID(context.Context, *Request, *Response) error
	AddMiddlewareType(context.Context, *Request, *Response) error
	DeleteMiddlewareTypeByID(context.Context, *Request, *Response) error
	UpdateMiddlewareType(context.Context, *Request, *Response) error
	QueryMiddlewareTypeByID(context.Context, *Request, *Response) error
	QueryAllMiddlewareType(context.Context, *Request, *Response) error
}

func RegisterMiddlewareApiHandler(s server.Server, hdlr MiddlewareApiHandler, opts ...server.HandlerOption) error {
	type middlewareApi interface {
		AddMiddleware(ctx context.Context, in *Request, out *Response) error
		DeleteMiddleware(ctx context.Context, in *Request, out *Response) error
		UpdateMiddleware(ctx context.Context, in *Request, out *Response) error
		QueryMiddlewareByID(ctx context.Context, in *Request, out *Response) error
		QueryAllMiddleware(ctx context.Context, in *Request, out *Response) error
		QueryAllMiddlewareByTypeID(ctx context.Context, in *Request, out *Response) error
		AddMiddlewareType(ctx context.Context, in *Request, out *Response) error
		DeleteMiddlewareTypeByID(ctx context.Context, in *Request, out *Response) error
		UpdateMiddlewareType(ctx context.Context, in *Request, out *Response) error
		QueryMiddlewareTypeByID(ctx context.Context, in *Request, out *Response) error
		QueryAllMiddlewareType(ctx context.Context, in *Request, out *Response) error
	}
	type MiddlewareApi struct {
		middlewareApi
	}
	h := &middlewareApiHandler{hdlr}
	return s.Handle(s.NewHandler(&MiddlewareApi{h}, opts...))
}

type middlewareApiHandler struct {
	MiddlewareApiHandler
}

func (h *middlewareApiHandler) AddMiddleware(ctx context.Context, in *Request, out *Response) error {
	return h.MiddlewareApiHandler.AddMiddleware(ctx, in, out)
}

func (h *middlewareApiHandler) DeleteMiddleware(ctx context.Context, in *Request, out *Response) error {
	return h.MiddlewareApiHandler.DeleteMiddleware(ctx, in, out)
}

func (h *middlewareApiHandler) UpdateMiddleware(ctx context.Context, in *Request, out *Response) error {
	return h.MiddlewareApiHandler.UpdateMiddleware(ctx, in, out)
}

func (h *middlewareApiHandler) QueryMiddlewareByID(ctx context.Context, in *Request, out *Response) error {
	return h.MiddlewareApiHandler.QueryMiddlewareByID(ctx, in, out)
}

func (h *middlewareApiHandler) QueryAllMiddleware(ctx context.Context, in *Request, out *Response) error {
	return h.MiddlewareApiHandler.QueryAllMiddleware(ctx, in, out)
}

func (h *middlewareApiHandler) QueryAllMiddlewareByTypeID(ctx context.Context, in *Request, out *Response) error {
	return h.MiddlewareApiHandler.QueryAllMiddlewareByTypeID(ctx, in, out)
}

func (h *middlewareApiHandler) AddMiddlewareType(ctx context.Context, in *Request, out *Response) error {
	return h.MiddlewareApiHandler.AddMiddlewareType(ctx, in, out)
}

func (h *middlewareApiHandler) DeleteMiddlewareTypeByID(ctx context.Context, in *Request, out *Response) error {
	return h.MiddlewareApiHandler.DeleteMiddlewareTypeByID(ctx, in, out)
}

func (h *middlewareApiHandler) UpdateMiddlewareType(ctx context.Context, in *Request, out *Response) error {
	return h.MiddlewareApiHandler.UpdateMiddlewareType(ctx, in, out)
}

func (h *middlewareApiHandler) QueryMiddlewareTypeByID(ctx context.Context, in *Request, out *Response) error {
	return h.MiddlewareApiHandler.QueryMiddlewareTypeByID(ctx, in, out)
}

func (h *middlewareApiHandler) QueryAllMiddlewareType(ctx context.Context, in *Request, out *Response) error {
	return h.MiddlewareApiHandler.QueryAllMiddlewareType(ctx, in, out)
}
