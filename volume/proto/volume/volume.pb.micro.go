// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/volume/volume.proto

package volume

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Volume service

func NewVolumeEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Volume service

type VolumeService interface {
	AddVolume(ctx context.Context, in *RVolumeInfo, opts ...client.CallOption) (*Response, error)
	QueryVolumeByID(ctx context.Context, in *RequestVolumeID, opts ...client.CallOption) (*RVolumeInfo, error)
	DeleteVolume(ctx context.Context, in *RequestVolumeID, opts ...client.CallOption) (*Response, error)
	UpdateVolume(ctx context.Context, in *RVolumeInfo, opts ...client.CallOption) (*Response, error)
	QueryAllVolume(ctx context.Context, in *RequestQueryAll, opts ...client.CallOption) (*ResponseAllVolume, error)
}

type volumeService struct {
	c    client.Client
	name string
}

func NewVolumeService(name string, c client.Client) VolumeService {
	return &volumeService{
		c:    c,
		name: name,
	}
}

func (c *volumeService) AddVolume(ctx context.Context, in *RVolumeInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Volume.AddVolume", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeService) QueryVolumeByID(ctx context.Context, in *RequestVolumeID, opts ...client.CallOption) (*RVolumeInfo, error) {
	req := c.c.NewRequest(c.name, "Volume.QueryVolumeByID", in)
	out := new(RVolumeInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeService) DeleteVolume(ctx context.Context, in *RequestVolumeID, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Volume.DeleteVolume", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeService) UpdateVolume(ctx context.Context, in *RVolumeInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Volume.UpdateVolume", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeService) QueryAllVolume(ctx context.Context, in *RequestQueryAll, opts ...client.CallOption) (*ResponseAllVolume, error) {
	req := c.c.NewRequest(c.name, "Volume.QueryAllVolume", in)
	out := new(ResponseAllVolume)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Volume service

type VolumeHandler interface {
	AddVolume(context.Context, *RVolumeInfo, *Response) error
	QueryVolumeByID(context.Context, *RequestVolumeID, *RVolumeInfo) error
	DeleteVolume(context.Context, *RequestVolumeID, *Response) error
	UpdateVolume(context.Context, *RVolumeInfo, *Response) error
	QueryAllVolume(context.Context, *RequestQueryAll, *ResponseAllVolume) error
}

func RegisterVolumeHandler(s server.Server, hdlr VolumeHandler, opts ...server.HandlerOption) error {
	type volume interface {
		AddVolume(ctx context.Context, in *RVolumeInfo, out *Response) error
		QueryVolumeByID(ctx context.Context, in *RequestVolumeID, out *RVolumeInfo) error
		DeleteVolume(ctx context.Context, in *RequestVolumeID, out *Response) error
		UpdateVolume(ctx context.Context, in *RVolumeInfo, out *Response) error
		QueryAllVolume(ctx context.Context, in *RequestQueryAll, out *ResponseAllVolume) error
	}
	type Volume struct {
		volume
	}
	h := &volumeHandler{hdlr}
	return s.Handle(s.NewHandler(&Volume{h}, opts...))
}

type volumeHandler struct {
	VolumeHandler
}

func (h *volumeHandler) AddVolume(ctx context.Context, in *RVolumeInfo, out *Response) error {
	return h.VolumeHandler.AddVolume(ctx, in, out)
}

func (h *volumeHandler) QueryVolumeByID(ctx context.Context, in *RequestVolumeID, out *RVolumeInfo) error {
	return h.VolumeHandler.QueryVolumeByID(ctx, in, out)
}

func (h *volumeHandler) DeleteVolume(ctx context.Context, in *RequestVolumeID, out *Response) error {
	return h.VolumeHandler.DeleteVolume(ctx, in, out)
}

func (h *volumeHandler) UpdateVolume(ctx context.Context, in *RVolumeInfo, out *Response) error {
	return h.VolumeHandler.UpdateVolume(ctx, in, out)
}

func (h *volumeHandler) QueryAllVolume(ctx context.Context, in *RequestQueryAll, out *ResponseAllVolume) error {
	return h.VolumeHandler.QueryAllVolume(ctx, in, out)
}
